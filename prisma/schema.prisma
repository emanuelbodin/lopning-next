generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
  }

model CompetitionCategory {
  id          String        @id @default(cuid())
  name        String
  Competition Competition[]
}

model Competition {
  id         String              @id @default(cuid())
  date       DateTime
  categoryId String
  category   CompetitionCategory @relation(fields: [categoryId], references: [id])
  Result     Result[]
}

model Competitor {
  id     String   @id @default(cuid())
  name   String   @unique
  Result Result[]
}

model Result {
  id            String      @id @default(cuid())
  competitionId String
  competitorId  String
  points        Int
  timeMin       Int
  timeSec       Int
  competition   Competition @relation(fields: [competitionId], references: [id])
  competitor    Competitor  @relation(fields: [competitorId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  createdAt     DateTime  @default(now())
  emailVerified DateTime? @map("verifiedAt")
  sessions      Session[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime @map("expiresAt")
  user         User     @relation(fields: [userId], references: [id])

  @@map("sessions")
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime @map("expiresAt")

  @@unique([identifier, token])
}
